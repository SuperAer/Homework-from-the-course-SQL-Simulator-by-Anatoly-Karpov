### Задача 12.

---

В этом задании рассмотрим ещё более продвинутый функционал и научимся вместе с оконными функциями применять оператор `FILTER`, с которым мы уже работали [на прошлых уроках](https://lab.karpov.courses/learning/152/module/1762/lesson/17927/54325/256098/).

Если к определению оконной функции добавить предложение `FILTER`, то в окно попадут только те входные строки, для которых условие фильтра будет вычислено как истинное.

При этом предложение `FILTER` допускается только для агрегирующих оконных функций.

В общем виде вся конструкция выглядит так:

```
SELECT agg_function(column) FILTER (WHERE [condition]) OVER (...)
FROM table
```

---

Пример:

```
SELECT SUM(column_1) FILTER (WHERE column_2 > 100) OVER (PARTITION BY column_3 ORDER BY column_4) AS sum
FROM table
```

---

**Задание:**

Примените оконную функцию к таблице `products` и с помощью агрегирующей функции в отдельной колонке для каждой записи проставьте среднюю цену всех товаров. Колонку с этим значением назовите `avg_price`.

Затем с помощью оконной функции и оператора `FILTER` в отдельной колонке рассчитайте среднюю цену товаров без учёта самого дорогого. Колонку с этим средним значением назовите `avg_price_filtered`. Полученные средние значения в колонках `avg_price` и `avg_price_filtered` округлите до двух знаков после запятой.

Выведите всю информацию о товарах, включая значения в новых колонках. Результат отсортируйте сначала по убыванию цены товара, затем по возрастанию id товара.

Поля в результирующей таблице: `product_id`, `name`, `price`, `avg_price`, `avg_price_filtered`

---

**Пояснение:**

В этой задаче окном снова выступает вся таблица. Сортировку внутри окна указывать не нужно.

---

 **Ожидаемый результат**

|product_id|name|price|avg_price|avg_price_filtered|
|---|---|---|---|---|
|13|икра|800.0|133.54|125.79|
|37|баранина|559.0|133.54|125.79|
|15|масло оливковое|450.0|133.54|125.79|
|57|свинина|450.0|133.54|125.79|
|43|кофе без кофеина|400.0|133.54|125.79|
|...|...|...|...|...|
|45|чай зеленый листовой|78.0|133.54|125.79|
|53|мука|78.0|133.54|125.79|
|38|апельсины|76.0|133.54|125.79|
|52|квас|76.0|133.54|125.79|
|28|сливки|75.0|133.54|125.79|
|...|...|...|...|...|
|6|сухарики|25.0|133.54|125.79|
|5|кофе 3 в 1|15.0|133.54|125.79|
|73|лепешка|15.0|133.54|125.79|
|10|семечки|12.0|133.54|125.79|
|54|пакет бумажный|1.0|133.54|125.79|

Affected rows: 87

---





# Решения:

## Мое решение:
```
SELECT product_id, name, price, 
ROUND(AVG(price) OVER(),2) as avg_price, 
ROUND(AVG(price) FILTER (WHERE price < max_price) OVER(),2) as avg_price_filtered
FROM(
    SELECT product_id, name, price, MAX(price) OVER() as max_price 
    FROM products
) t
ORDER BY price DESC, product_id ASC
```

## Решение Автора:
```
SELECT product_id,
       name,
       price,
       round(avg(price) OVER (), 2) as avg_price,
       round(avg(price) filter (WHERE price != (SELECT max(price)
                                         FROM   products))
OVER (), 2) as avg_price_filtered
FROM   products
ORDER BY price desc, product_id
```
