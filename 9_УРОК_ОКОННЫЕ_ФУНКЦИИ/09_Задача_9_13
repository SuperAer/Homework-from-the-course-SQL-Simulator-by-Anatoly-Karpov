### * Задача 13.

---

А теперь ещё одна задача на фильтрацию по окну — в этот раз посложнее.

**Задание:**

Для каждой записи в таблице `user_actions` с помощью оконных функций и предложения `FILTER` посчитайте, сколько заказов сделал и сколько отменил каждый пользователь на момент совершения нового действия.

Иными словами, для каждого пользователя в каждый момент времени посчитайте две накопительные суммы — числа оформленных и числа отменённых заказов. Если пользователь оформляет заказ, то число оформленных им заказов увеличивайте на 1, если отменяет — увеличивайте на 1 количество отмен.

Колонки с накопительными суммами числа оформленных и отменённых заказов назовите соответственно `created_orders` и `canceled_orders`. На основе этих двух колонок для каждой записи пользователя посчитайте показатель cancel_rate, т.е. долю отменённых заказов в общем количестве оформленных заказов. Значения показателя округлите до двух знаков после запятой. Колонку с ним назовите `cancel_rate`.

В результате у вас должны получиться три новые колонки с динамическими показателями, которые изменяются во времени с каждым новым действием пользователя.

В результирующей таблице отразите все колонки из исходной таблицы вместе с новыми колонками. Отсортируйте результат по колонкам `user_id`, `order_id`, `time` — по возрастанию значений в каждой.

Добавьте в запрос оператор `LIMIT` и выведите только первые 1000 строк результирующей таблицы.

Поля в результирующей таблице:

`user_id`, `order_id`, `action`, `time`, `created_orders`, `canceled_orders`, `cancel_rate`

---

**Пояснение:**

Подумайте, как правильно задать окна и какие фильтры в них нужно указать.

Не забудьте изменить тип данных при делении двух целочисленных значений.

---

 **Ожидаемый результат**

|user_id|order_id|action|time|created_orders|canceled_orders|cancel_rate|
|---|---|---|---|---|---|---|
|1|1|create_order|2022-08-24 01:52:21|1|0|0.0|
|1|4683|create_order|2022-08-27 20:56:31|2|0|0.0|
|1|22901|create_order|2022-09-02 00:58:40|3|0|0.0|
|1|23149|create_order|2022-09-02 02:36:41|4|0|0.0|
|2|2|create_order|2022-08-24 06:37:57|1|0|0.0|
|...|...|...|...|...|...|...|
|128|16000|cancel_order|2022-08-31 08:01:26.483528|3|1|0.33|
|128|16000|create_order|2022-08-31 07:55:24|3|0|0.0|
|128|43280|create_order|2022-09-05 15:53:12|4|1|0.25|
|129|140|create_order|2022-08-24 23:40:13|1|0|0.0|
|129|1222|create_order|2022-08-25 23:24:06|2|0|0.0|
|...|...|...|...|...|...|...|
|227|12572|create_order|2022-08-30 08:36:56|4|0|0.0|
|227|12578|create_order|2022-08-30 08:38:26|5|0|0.0|
|227|23268|create_order|2022-09-02 04:03:24|6|0|0.0|
|227|25873|create_order|2022-09-02 17:52:55|7|0|0.0|
|227|25885|create_order|2022-09-02 17:54:22|8|0|0.0|

Affected rows: 1000

---



# Решения:

## Мое решение:
```sql
SELECT user_id,
       order_id,
       action,
       time,
       count(action) filter (WHERE action = 'create_order') OVER (PARTITION BY user_id
                                                                  ORDER BY time) as created_orders,
       count(action) filter (WHERE action != 'create_order') OVER (PARTITION BY user_id
                                                                   ORDER BY time) as canceled_orders,
       round(count(action) filter (WHERE action != 'create_order') OVER (PARTITION BY user_id
                                                                         ORDER BY time)::decimal /count(action) filter (WHERE action = 'create_order') OVER (PARTITION BY user_id ORDER BY time) , 2) as cancel_rate
FROM   user_actions
ORDER BY user_id, order_id, time limit 1000
```

## Решение Автора:
Оптимальнее, чем мое, потому что меньше задействует вычислительных мощностей - один раз посчитал в подзапросе значения столбцов окнонными функциями, а затем уже оперирует готовыми значениями. А у меня на 2 оконных функции больше.
```sql
SELECT user_id,
       order_id,
       action,
       time,
       created_orders,
       canceled_orders,
       round(canceled_orders::decimal / created_orders, 2) as cancel_rate
FROM   (SELECT user_id,
               order_id,
               action,
               time,
               count(order_id) filter (WHERE action != 'cancel_order') OVER (PARTITION BY user_id
                                                                             ORDER BY time) as created_orders,
               count(order_id) filter (WHERE action = 'cancel_order') OVER (PARTITION BY user_id
                                                                            ORDER BY time) as canceled_orders
        FROM   user_actions) t
ORDER BY user_id, order_id, time limit 1000
```
