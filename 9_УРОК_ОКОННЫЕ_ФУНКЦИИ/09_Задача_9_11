
### Задача 11. 

**НОВАЯ ЗАДАЧА**

Доработаем запрос из предыдущего задания и теперь вдобавок к количеству первых и повторных заказов посчитаем их доли от общего числа. Для этого применим ещё одну оконную функцию поверх наших данных.

---

**Задание:**

К запросу, полученному на предыдущем шаге, примените оконную функцию и для каждого дня посчитайте долю первых и повторных заказов. Сохраните структуру полученной ранее таблицы и добавьте только одну новую колонку с посчитанными значениями.

Колонку с долей заказов каждой категории назовите `orders_share`. Значения в полученном столбце округлите до двух знаков после запятой. В результат также включите количество заказов в группах, посчитанное на предыдущем шаге.

В расчётах по-прежнему учитывайте только неотменённые заказы.

Результат отсортируйте сначала по возрастанию даты, затем по возрастанию значений в колонке с типом заказа.

Поля в результирующей таблице: `date`, `order_type`, `orders_count`, `orders_share`

---

**Пояснение:**

При использовании оконной функции обратите внимание, что посчитать долю заказов каждой категории необходимо для каждой даты в таблице, а не для всех данных.

---

 **Ожидаемый результат**

|date|order_type|orders_count|orders_share|
|---|---|---|---|
|24/08/22|Первый|127|0.92|
|24/08/22|Повторный|11|0.08|
|25/08/22|Первый|802|0.76|
|25/08/22|Повторный|257|0.24|
|26/08/22|Первый|985|0.68|
|...|...|...|...|
|31/08/22|Первый|1380|0.4|
|31/08/22|Повторный|2030|0.6|
|01/09/22|Первый|1492|0.4|
|01/09/22|Повторный|2196|0.6|
|02/09/22|Первый|1865|0.37|
|...|...|...|...|
|06/09/22|Повторный|2438|0.71|
|07/09/22|Первый|1419|0.3|
|07/09/22|Повторный|3358|0.7|
|08/09/22|Первый|1661|0.3|
|08/09/22|Повторный|3813|0.7|

Affected rows: 32

---


# Решения:

## Мое решение:
```
SELECT date,
       order_type,
       orders_count,
       round(orders_count/sum (orders_count) OVER(PARTITION BY date), 2) as orders_share
FROM   (SELECT date,
               order_type,
               count(order_type) as orders_count
        FROM   (SELECT date(time) as date,
                       user_id,
                       order_id,
                       rank() OVER(PARTITION BY user_id
                                   ORDER BY time) as rank,
                       case when rank() OVER(PARTITION BY user_id
                                             ORDER BY time) = 1 then 'Первый'
                            else 'Повторный' end as order_type
                FROM   user_actions
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) t
        GROUP BY date, order_type) t2
ORDER BY date, order_type
```

## Решение Автора:
```
SELECT date,
       order_type,
       orders_count,
       round(orders_count / sum(orders_count) OVER (PARTITION BY date),
             2) as orders_share
FROM   (SELECT time::date as date,
               order_type,
               count(order_id) as orders_count
        FROM   (SELECT user_id,
                       order_id,
                       time,
                       case when time = min(time) OVER (PARTITION BY user_id) then 'Первый'
                            else 'Повторный' end as order_type
                FROM   user_actions
                WHERE  order_id not in (SELECT order_id
                                        FROM   user_actions
                                        WHERE  action = 'cancel_order')) t
        GROUP BY date, order_type) t
ORDER BY date, order_type
```
