
### ** Задача 21.

---

И напоследок рассмотрим ещё один тип объединения таблиц, который тоже нужно знать. Это так называемый `SELF JOIN`. 

`SELF JOIN` — не что иное, как объединение таблицы с самой собой. Да, такая операция тоже возможна и, более того, часто бывает полезна.

Присоединить таблицу к самой себе можно с помощью любого рассмотренного ранее типа джойна. Чтобы запрос отработал корректно, таблице нужно присвоить два разных алиаса:

	SELECT ... 
	FROM table_name t1 JOIN table_name t2 
		ON [condition] 

	SELECT ... 
	FROM table_name t1 LEFT JOIN table_name t2 
		ON [condition] 

	SELECT ... 
	FROM table_name t1 FULL JOIN table_name t2 
		ON [condition] 

	SELECT ... 
	FROM table_name t1 CROSS JOIN table_name t2

---

**На заметку:**

Подробнее о `SELF JOIN` можно узнать [здесь](https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-self-join/).

---

Но зачем это вообще может быть нужно? Давайте разберёмся на реальном примере!

Мы уже почти в конце первого модуля, поэтому, как и обещали, сложная и вместе с тем творческая задача.

---

**Задание:**

Выясните, какие пары товаров покупают вместе чаще всего.

Пары товаров сформируйте на основе таблицы с заказами. Отменённые заказы не учитывайте. В качестве результата выведите две колонки — колонку с парами наименований товаров и колонку со значениями, показывающими, сколько раз конкретная пара встретилась в заказах пользователей. Колонки назовите соответственно `pair` и `count_pair`.

Пары товаров должны быть представлены в виде списков из двух наименований. Пары товаров внутри списков должны быть отсортированы в порядке возрастания наименования. Результат отсортируйте сначала по убыванию частоты встречаемости пары товаров в заказах, затем по колонке `pair` — по возрастанию.

Поля в результирующей таблице: `pair`, `count_pair`

---

**Пояснение:**

В этой задаче вам необходимо сделать `SELF JOIN`. Подумайте, какую таблицу нужно присоединить к самой себе и заранее обработайте данные. Для решения рекомендуем воспользоваться табличными выражениями. Также вам могут пригодиться [функции для работы со списками](https://www.postgresql.org/docs/8.4/functions-array.html). Ознакомьтесь с примерами из документации и подумайте, что можно использовать в своём решении.

Задача творческая и может быть решена разными способами.

---

 **Ожидаемый результат**

|pair|count_pair|
|---|---|
|['курица', 'хлеб']|249|
|['сахар', 'хлеб']|237|
|['батон', 'хлеб']|235|
|['кофе 3 в 1', 'чай черный в пакетиках']|235|
|['курица', 'сахар']|233|
|...|...|
|['леденцы', 'мука']|58|
|['масло оливковое', 'рис']|58|
|['молоко', 'рыба соленая']|58|
|['морс клюквенный', 'сливки']|58|
|['семечки', 'энергетический напиток']|58|
|...|...|
|['масло кунжутное', 'шпроты']|2|
|['масло льняное', 'мед']|2|
|['мед', 'сухофрукты']|2|
|['рыба вяленая', 'сухофрукты']|2|
|['сухофрукты', 'чайный гриб']|1|

Affected rows: 3740

---

 **Подсказка на случай, если совсем не получается**

Для каждой пары товаров вам необходимо посчитать, сколько раз она встретилась в заказах пользователей. Главная загвоздка заключается в том, что при самоджойне каждый товар образует пару с самим собой («A-A») и при этом каждая пара встречается дважды («A-B» и «B-A»). Суть задачи состоит в том, чтобы избавиться от этих двух проблем и получить корректные расчёты.

---

 
# Решения:

## Мое решение:
-- ОПТИМАЛЬНЫЙ ВАРИАНТ:
```
WITH ordered_items AS (
    SELECT DISTINCT order_id, product_id, name
    FROM
        (SELECT order_id, unnest(product_ids) product_id
        FROM orders
        WHERE array_length(product_ids,1) > 1 AND order_id NOT IN (SELECT order_id FROM user_actions WHERE action = 'cancel_order')) t
        LEFT JOIN products using(product_id)
    )


SELECT ARRAY[LEAST(t1.name, t2.name), GREATEST(t1.name, t2.name)] pair, count(*) AS count_pair
FROM ordered_items t1
JOIN ordered_items t2
ON t1.order_id = t2.order_id AND t1.name > t2.name
GROUP BY pair
ORDER BY count_pair DESC, pair ASC
```

-- ДРУГОЙ ВАРИАНТ (МЕНЕЕ ОПТИМАЛЬНЫЙ ПО ВЫЧИСЛИТЕЛЬНЫМ РЕСУРСАМ):
-- SELECT ARRAY_SORT(ARRAY[t1.name, t2.name]) pair, count(*) AS count_pair
-- FROM ordered_items t1
-- JOIN ordered_items t2
-- ON t1.order_id = t2.order_id AND t1.name > t2.name
-- GROUP BY pair
-- ORDER BY count_pair DESC, pair ASC


## Решение от Автора курса:

Пока неизвестно. 
