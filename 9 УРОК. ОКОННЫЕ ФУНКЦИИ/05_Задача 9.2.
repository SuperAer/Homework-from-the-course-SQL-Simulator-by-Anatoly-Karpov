### Задача 2.

---

С ранжирующими функциями разобрались, теперь давайте научимся в паре с оконными применять и агрегирующие функции:

```
SELECT SUM(column) OVER (PARTITION BY ... ORDER BY ... ROWS/RANGE BETWEEN ...) AS sum
FROM table
```

---

**Задание:**

Примените оконную функцию к таблице `products` и с помощью агрегирующей функции в отдельной колонке для каждой записи проставьте цену самого дорогого товара. Колонку с этим значением назовите `max_price`.

Затем для каждого товара посчитайте долю его цены в стоимости самого дорогого товара — просто поделите одну колонку на другую. Полученные доли округлите до двух знаков после запятой. Колонку с долями назовите `share_of_max`.

Выведите всю информацию о товарах, включая значения в новых колонках. Результат отсортируйте сначала по убыванию цены товара, затем по возрастанию id товара.

Поля в результирующей таблице: `product_id`, `name`, `price`, `max_price`, `share_of_max`

---

**Пояснение:**

В этой задаче окном выступает вся таблица. Сортировку внутри окна указывать не нужно.

С результатом агрегации по окну можно проводить арифметические и логические операции. Также к нему можно применять и другие функции — например, округление, как в этой задаче.

---

 **Ожидаемый результат**

|product_id|name|price|max_price|share_of_max|
|---|---|---|---|---|
|13|икра|800.0|800.0|1.0|
|37|баранина|559.0|800.0|0.7|
|15|масло оливковое|450.0|800.0|0.56|
|57|свинина|450.0|800.0|0.56|
|43|кофе без кофеина|400.0|800.0|0.5|
|...|...|...|...|...|
|45|чай зеленый листовой|78.0|800.0|0.1|
|53|мука|78.0|800.0|0.1|
|38|апельсины|76.0|800.0|0.1|
|52|квас|76.0|800.0|0.1|
|28|сливки|75.0|800.0|0.09|
|...|...|...|...|...|
|6|сухарики|25.0|800.0|0.03|
|5|кофе 3 в 1|15.0|800.0|0.02|
|73|лепешка|15.0|800.0|0.02|
|10|семечки|12.0|800.0|0.02|
|54|пакет бумажный|1.0|800.0|0.0|

Affected rows: 87

---

# Решения:

## Мое решение и решение Автора совпадают:


```
SELECT 
    product_id, 
    name, 
    price, 
    MAX(price) OVER() AS max_price, 
    ROUND(price/MAX(price) OVER(),2) AS share_of_max
FROM products
ORDER BY price DESC, product_id
```
